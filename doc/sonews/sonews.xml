<?xml version="1.0"?>
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.2//EN" "http://www.oasis-open.org/docbook/xml/4.2/docbookx.dtd" [
  <!ENTITY tex "TeX">
  <!ENTITY latex "LaTeX">
]>
<book id="sonews.xml" lang="en">
  <title>sonews Usenet News Server</title>
  <para>
    <emphasis role="bold">sonews</emphasis> is a NNTP server than can provide 
    access to both local and global Usenets newsgroups. It is written in 
    <ulink url="http://java.sun.com/">Java</ulink> and uses a relational
    database as backend.
  </para>

  <chapter>
    <title>Introduction</title>
    <para>sonews is a RCF3977 compliant NNTP Usenet server. 
    It is written in Java and uses a database management system
    as backend (currently
    <ulink url="http://www.postgresql.com/">PostgreSQL</ulink> and
    <ulink url="http://www.mysql.com/">MySQL</ulink>, CouchDB is in development).
    sonews is highly multithreaded and uses Java NIO asynchronous sockets
    to handle thousands of concurrent connections.</para>
    <para>sonews is Free and Open Source Software (FOSS) licensed under the 
    terms of the
    <ulink url="http://www.gnu.org/licenses/gpl.html">GNU General Public License</ulink>
    Version 3 (or later).</para>

      <para>Ancestor of sonews is probably the Neat NNTP Daemon (n3tpd) 
      although there is very little code in sonews that can be identified
      as direct derivation.
      sonews was developed as diploma thesis project of Christian Lins at
      <ulink url="http://de.sun.com/">StarOffice development</ulink>
      in Hamburg and is now a Free Software project.</para>
  </chapter>

  <chapter label="2">
    <title>Installation and initial setup</title>
    <sect1 label="2.1">
      <title>Download &amp; Installation</title>
      <sect2 label="2.1.1">
        <title>Build from source</title>
        <para>
          See <ulink url="http://www.sonews.org/">sonews.org</ulink> for recent binary and source tarballs. 
          You may also checkout a recent version from Git at <ulink url="https://github.com/cli/sonews.git">Github</ulink>
        </para>
        <para>
          Use the archive and extract it in a directory of your choice. Or use the checked-out source of course.
          Make sure your system provides the necessary prerequisites:</para>
        <itemizedlist>
          <listitem>
            <para>Java 7 JDK (or higher)</para>
          </listitem>
          <listitem>
            <para>Apache Maven 3 (or higher)</para>
          </listitem>
        </itemizedlist>
        <para>
          Maven will download all necessary dependencies from a repository automatically.
          Use the following command to build and package sonews:
        </para>
        <screen>$ mvn clean compile package</screen>
        <para>You'll find the resulting sonews.jar file in the target/ directory.</para>
      </sect2>

      <sect2 label="2.1.2">
        <title>Ubuntu and other Debian-based systems</title>
        <para>You can install sonews with 
        <ulink url="http://www.debian.org/doc/manuals/apt-howto/">APT</ulink>
        easily.
        Christian Lins provides a package repository at Launchpad with
        sonews Debian packages.
        See <ulink url="https://launchpad.net/~cli/+archive/sonews">https://launchpad.net/~cli/+archive/sonews</ulink>
        for more information about how to use an APT repository to install sonews.
        </para>
        <para>
        On recent Ubuntu version you can use the following command to
        add the sonews package archive:
        <screen>$ sudo add-apt-repository ppa:cli/sonews</screen>
        </para>
        <para>After adding the repository, force an update of your local package list:</para>
        <screen>$ sudo apt-get update</screen>
        <para>To install sonews and all prerequisites issue the following command:</para>
        <screen>$ sudo apt-get install sonews</screen>
        <para>This method should work for all recent Debian-based distributions
(<ulink url="http://www.debian.org/">Debian</ulink>, <ulink url="http://www.ubuntu.com/">Ubuntu</ulink>, etc.).</para>
      </sect2>
    </sect1>

    <sect1 label="2.2">
      <title>Initial database setup</title>
      <para>Before you start sonews, you must prepare the database. Currently sonews is known
to work with PostgreSQL and MySQL.</para>
      <para>It is highly recommended to create an own database for every sonews instance, e.g.
called 'sonews'. Additionally, it is recommended to create a unique database user
for sonews, e.g. 'sonewsuser'. Please do not use the root user for sonews!
The sonews user needs rights for SELECT, INSERT and UPDATE statements.
Refer to the database manual for instructions.</para>
      <para>
          You will find the SQL Schema definitions (database_*.sql) 
          in the util/ subdirectory of the source and binary 
          distributions.
      </para>
      <para>
        Use these templates and a database tool (e.g. phpMyAdmin, pgAdmin, etc.) to create
        the necessary table structures.
      </para>
      <para>
        Make sure you fill in the correct database settings in the sonews.conf file (see next chapter).
      </para>
    </sect1>
  </chapter>

  <chapter label="3">
    <title>Running sonews</title>
    <sect1 label="3.1">
      <title>Configuration values</title>
      <para>There is a bootstrap configuration in /etc/sonews/sonews.conf and a regular configuration
in the database table config.</para>
      <para>There are various configuration values that can be adapted:</para>
      <variablelist>
        <varlistentry>
          <term>&lsquo;<literal>sonews.article.maxsize</literal>&rsquo;</term>
          <listitem>
            <para>Maximum allowed body size of a news message given in kilobytes. Please note that
for MySQL the &lsquo;<literal>max_allowed_packet</literal>&rsquo; configuration variable must
be set to a value higher than &lsquo;<literal>sonews.article.maxsize</literal>&rsquo; otherwise posting
of large mails will fail.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>&lsquo;<literal>sonews.hostname</literal>&rsquo;</term>
          <listitem>
            <para>
              Canonical name of the server instance. This variable is part of
              the server's hello message to the client and used to generate
              Message-Ids.
              It is highly recommended to set sonews.hostname to the full
              qualified domain name (FQDN) of the host machine.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>&lsquo;<literal>sonews.loglevel</literal>&rsquo;</term>
          <listitem>
            <para>
            Specifies the minimum log level of messages sonews is logging
            to the logfile. Default: INFO. Can be one of the following
            values: ALL, SEVERE, WARNING, INFO, CONFIG, FINE, FINER,
            FINEST, OFF (disables logging) 
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>&lsquo;<literal>sonews.port</literal>&rsquo;</term>
          <listitem>
            <para>
              Listening port of sonews daemon. This value can be overridden
              with the -p command line argument.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>&lsquo;<literal>sonews.timeout</literal>&rsquo;</term>
          <listitem>
            <para>
              Socket timeout for client connections in seconds. Default as
              recommended in RFC3977 is 180 seconds.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>&lsquo;<literal>sonews.storage.database</literal>&rsquo;</term>
          <listitem>
            <para>
              Database connect string in the form:
              protocol:subprotocol:protocolspecific
            </para>
            <para>
              Example for PostgreSQL database sonews running on localhost:
              jdbc:postgresql:sonews
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>&lsquo;<literal>sonews.storage.user</literal>&rsquo;</term>
          <listitem>
            <para>
              Database user name
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>&lsquo;<literal>sonews.storage.password</literal>&rsquo;</term>
          <listitem>
            <para>
              Database user password
            </para>
          </listitem>
        </varlistentry>
      </variablelist>
    </sect1>

    <sect1 label="3.2">
      <title>Command line arguments</title>
      <para>If you like to start sonews directly, you can use one of the following
arguments:</para>
      <screen>java -jar sonews.jar [arguments]
        where arguments:
    -c|-config         &lt;path to config file&gt; if custom config file preferred
    -dumpjdbcdriver    Prints out a list of available JDBC drivers
    -feed              Enables feed daemon for pulling news from peer servers
    -h|-help           This output
    -p portnumber      Port on which sonews is listening for incoming connections.
                       Overrides port settings in config file and database.</screen>
      <para>
        The source and binary distributions contain a <literal>util/sonews</literal>
        script that makes it more comfortable (well it's not comfortable at all)
        to start and stop sonews daemon.
      </para>
      
      <para>
        You can start sonews directly from the source tree using Maven:
        <screen>$ mvn exec:java -Dexec.mainClass="org.sonews.Main" -Dexec.args="-p 9119"</screen>
      </para>
    </sect1>

    <sect1 label="3.3">
      <title>Newsgroup configuration</title>
      <para>
        The newsgroups are configured in the groups.conf configuration
        file. A sample file is provided as groups.conf.sample:
        <screen># Groupname   ID   Flags
control       1    0
local.test    2    0</screen>
        The file contains one group per file. At first the name, then
        the internal ID which must be unique within the sonews instance
        and the flags number which is currently not used and should be
        always 0.
      </para>
    </sect1>

    <sect1 label="3.5">
      <title>Peering</title>
      <para>
        sonews is able to synchronize selected groups with other newsservers
        using push or pull mechanisms. To enable the peering feature sonews
        must be started with the <literal>-feed</literal> command-line argument.
      </para>
      <para>
        The peering mechanism is configured in the peers.conf file.
        A sample is provided in peers.conf.sample:
        <screen># Configuration file for Usenet peering
# Format:
# [PUSH|PULL] GROUPNAME HOST
PULL news.software.servers.sonews news.sonews.org
PUSH news.software.servers.sonews news.sonews.org</screen>
      </para>
      <para>
        To peer with a remote server in both directions you need both
        a PUSH and a PULL entry. The push feeder is used every time
        a news message is posted to the local sonews instance. The news
        message is then immediately pushed to the remote host.
        The pull feeder checks the remote host in intervals for new
        messages and retrieves them.
      </para>
    </sect1>

  </chapter>

  <chapter label="4">
    <title>Development</title>
    <para>You're welcome to create patches with bugfixes or additional features.</para>
    <para>Some debugging hints: if the server blocks and does not longer respond you
probably found a deadlock. Do not kill the process with "kill -9 &lt;pid&gt;"
but send a SIGQUIT signal with "kill -3 &lt;pid&gt;" and the Java VM will output
a stracktrace of all threads. This output is the most valuable information to
fix the deadlock.</para>

    <sect1 label="4.1">
      <title>Writing extensions</title>
      <para>
        With sonews/1.1 or higher it is possible to easily extend sonews with
        new functionality using the plugin API.
      </para>

      <sect2 label="4.1.1">
        <title>Command plugin</title>
        <para>
          To introduce additional NNTP commands, implement the 
          <ulink url="apidoc/org/sonews/daemon/command/Command.html"><code>org.sonews.command.Command</code></ulink> 
          interface.
          Here is an example <code>HelloCommand</code> that simply returns "Hello"
          to the client:
          <code><screen>public class HelloCommand implements Command
{
  
  @Override
  public String[] getSupportedCommandStrings()
  {
    return "HELLO";
  }

  @Override
  public boolean hasFinished()
  {
    return true;
  }

  @Override
  public String impliedCapability()
  {
    return null;
  }

  @Override
  public boolean isStateful()
  {
    return false;
  }

  @Override
  public void processLine(NNTPConnection conn, final String line, byte[] raw)
    throws IOException
  {
    conn.println("100 Hello Client");
  }
  
}
          </screen></code> 
        </para>
        <para>
          Compile this example agains sonews.jar and tell sonews to load the
          plugin at startup:
          <screen>java -cp .:sonews.jar org.sonews.Main -p 9119 -plugin-command mypkg.HelloCommand</screen>

          Then you can try the new command:
          <screen>$ telnet localhost 9119
200 sonews/1.1.0 localhost - posting ok
hello
100 Hello Client</screen>
        </para>

        The <ulink url="http://news.sonews.org/apidoc/">API documentation</ulink> contains more 
        information about the sonews classes and their usage.
      </sect2>

      <sect2 label="4.1.2">
        <title>Backend storage plugin</title>
        <para>
          It is possible to use a completely different backend storage for
          sonews than a relational database.
          TODO: This feature is not completely available in sonews/2.0
        </para>
        <para>
          Most important classes reside in package <code>org.sonews.storage</code>.
          To use a custom storage backend in sonews you must implement a
          <code>StorageProvider</code> by implementing the 
          <ulink url="apidoc/org/sonews/storage/StorageProvider.html"><code>org.sonews.storage.StorageProvider</code></ulink>
          interface.
        </para>
        <para>
          The StorageProvider must return an instance of the specific
          <code>org.sonews.storage.Storage</code> implementation.
        </para>
      </sect2>
    </sect1>

  </chapter>

  <chapter label="5">
    <title>Links and further information</title>
    <para>Useful links regarding sonews and the sponsors:</para>
    <itemizedlist>
      <listitem>
        <para><ulink url="http://github.com/cli/sonews">Github Project Page</ulink>, see here for issues</para>
      </listitem>
      <listitem>
        <para><ulink url="http://www.sun.com/">Sun Microsystems</ulink>, friendly sponsor.</para>
      </listitem>
      <listitem>
        <para><ulink url="http://www.fh-osnabrueck">University of Applied Sciences Osnabrueck</ulink></para>
      </listitem>
    </itemizedlist>

    <sect1 label="5.1">
      <title>Users</title>
      <para>
        As sonews is a relatively young project there are little users known,
        but there are some (if you know more let me know).
      </para>
      <itemizedlist>
      <listitem>
        <para>
          <ulink url="http://www.sun.com/">Sun Microsystems</ulink> OpenOffice.org/StarOffice
          development located in Hamburg uses sonews to mirror the OpenOffice.org
          mailinglists.
        </para>
      </listitem>
      <listitem>
        <para>
          <ulink url="news://news.sonews.org:119">news.sonews.org</ulink> uses sonews to provide
          a freely accessible demo Newsserver.
        </para>
      </listitem>
    </itemizedlist>
    </sect1>

    <sect1 label="5.2">
      <title>Contributors and sponsors</title>
      <para>Maintainer and project lead:
Christian Lins (contact christian at lins dot me)</para>
      <para>See AUTHORS file for a complete list of contributors.</para>
      <para>Thanks to Sun's Tooling/IT team in Hamburg for the support!
       </para>
      <para>The author thanks <ulink url="http://www.sun.com/">Sun Microsystems</ulink> for fully
financing the first version of sonews. A really free software supporting company!</para>
      <para>If you like to support sonews with a donation of any kind (hardware, books, money, donuts,...),
 feel free to contact the project leader.
A friendly email or a bug report is most welcome, too :-)</para>
    </sect1>
  </chapter>
</book>
