<?xml version="1.0" encoding="UTF-8"?>
<project name="sonews" default="main" basedir=".">

    <property name="prj" value="."/>
    <property name="out" value="build"/>
    <property name="build.dir" value="${out}"/>
    <property name="inst.dir" value="/opt/sonews/sonews-1.1"/>
    <property name="build.class" value="${build.dir}/class"/>

    <!-- define how to handle CLASSPATH environment -->
    <property name="build.sysclasspath" value="ignore"/>

    <!-- set "modern" java compiler -->
    <property name="build.compiler" value="modern"/>

    <!-- set wether we want to compile with debug information -->
    <property name="debug" value="on"/>

    <!-- set wether we want to compile with optimisation -->
    <property name="optimize" value="off"/>

    <!-- set wether we want to compile with or without deprecation -->
    <property name="deprecation" value="on"/>


    <!-- classpath settings for compile and javadoc tasks -->
    <path id="classpath">
        <pathelement location="${build.class}"/>
        <pathelement location="lib/glassfish-mail.jar"/>
        <pathelement location="/usr/share/java/glassfish-mail.jar"/>
        <pathelement location="lib/mysql-connector-java.jar"/>
        <pathelement location="lib/junit-4.8.2.jar"/>
        <pathelement location="/usr/share/java/junit4.jar"/>
        <pathelement location="/usr/share/java/commons-codec.jar"/>
    </path>

    <!-- the main target, called in recursive builds -->
    <target name="main" depends="prepare,compile,jar"/>

    <!-- prepare output directories - -->
    <target name="prepare">
        <mkdir dir="${build.dir}"/>
        <mkdir dir="${build.class}"/>
    </target>


    <target name="compile" depends="prepare">
	<javac destdir="${build.class}"
               debug="${debug}"
               deprecation="${deprecation}"
               optimize="${optimize}"
               classpathref="classpath">
            <src path="./src"/>
                <include name="org/sonews/**/*.java"/>
	</javac>
	<javac destdir="${build.class}"
               debug="${debug}"
               deprecation="${deprecation}"
               optimize="${optimize}"
               classpathref="classpath">
            <src path="."/>
                <include name="test/**/*java"/>
	</javac>
    </target>
	
    <!-- create jar file -->
    <target name="jar" depends="prepare,compile"> 
        <jar jarfile="${build.dir}/sonews.jar"
             basedir="${build.class}">
            <include name="org/sonews/**/*.class"/>
        </jar>
        <jar jarfile="${build.dir}/test.jar"
             basedir="${build.class}">
            <include name="test/**/*.class"/>
        </jar>
        <jar jarfile="${build.dir}/sonews-helpers.jar"
             basedir=".">
            <include name="helpers/**/*"/>
        </jar>
    </target>

    <target name="install" depends="jar">
        <mkdir dir="${inst.dir}/lib"/>
        <mkdir dir="${inst.dir}/bin"/>
        <mkdir dir="${inst.dir}/helpers"/>
        <copy todir="${inst.dir}/lib">
             <fileset dir="lib">
		<include name="*.jar"/>	
             </fileset>
             <fileset dir="${build.dir}">
		<include name="*.jar"/>	
             </fileset>
        </copy>
        <copy todir="${inst.dir}/bin">
             <fileset dir="bin">
		<include name="*.sh"/>	
             </fileset>
        </copy>
        <chmod perm="755">
             <fileset dir="${inst.dir}/bin">
		<include name="*.sh"/>	
             </fileset>
        </chmod>
        <copy todir="${inst.dir}/helpers">
             <fileset dir="helpers">
		<include name="*"/>	
             </fileset>
        </copy>
    </target>

	<target name="javadoc" depends="prepare">
		<javadoc 
			destdir="build/apidoc">
			<fileset dir="src" defaultexcludes="yes">
				<include name="org/sonews/**"/>
				<exclude name="**/*.htm*"/>
			</fileset>
			<fileset dir="." defaultexcludes="yes">
				<include name="test/**"/>
				<exclude name="**/*.htm*"/>
			</fileset>
        </javadoc>
    </target>

    <!-- clean up -->
    <target name="clean" depends="prepare">
        <delete includeEmptyDirs="true">
            <fileset dir="${build.class}">
                <patternset>
                    <include name="**/*.class"/>
                    <include name="**/*.properties"/>
                </patternset>
            </fileset>
            <fileset dir="${build.dir}">
                <patternset>
                    <include name="**/*.jar"/>
                </patternset>
            </fileset>
	</delete>
    </target>
</project>
